import sys
import os
import pandas
from openpyxl import load_workbook


class Document():
    # –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∫–∞–∑–∞–Ω—ã–π —Ñ–∞–π–ª
    def __new__(cls, *args, **kwargs):
        instance = super().__new__(cls)
        this_directory = os.getcwd()
        path_document = os.path.join(this_directory, kwargs['read_document'])

        if os.path.exists(path_document):
            return instance
        else:
            print('\n', path_document)
            print("\n ‚õîÔ∏è No file to directory\n")
            sys.exit()
    
    def __init__(self, read_document: str, sheet_name: str):
        self.read_document: str = read_document
        self.data_frame: object = pandas.read_excel(self.read_document)
        self.work_book: object = load_workbook(self.read_document)
        self.work_sheet: str = self.work_book[sheet_name]
        self.data_column = None
        self.is_title = False
        self.search_text = None
        self.add_text_cell = None
        self.dell_text_cell = None

    
    @staticmethod
    def print_text(text: str, color_name: str = None, pause: bool = None) -> None:
        if color_name:
            color = color_name
            if color_name == 'orange':
                color = f"\033[33m{text}\033[0m"
            if color_name == 'blue':
                color = f"\033[34m{text}\033[0m"
            else:
                color = text
        else:
            color = text

        if pause:
            print(input(color))
        else:
            print(color)
    
    # –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–ø–∏—Å–æ–∫ –Ω—É–º–µ—Ä–æ–≤–∞–Ω—ã—Ö —Å—Ç—Ä–æ–∫ —Å –¥–∞–Ω–Ω—ã–º–∏ –≤ —É–∫–∞–∑–∞–Ω–æ–π —è—á–µ–π–∫–µ
    def return_list_data_row(self, column_name: str) -> None:
        all_rows_to_column = []
        if isinstance(self.data_frame, pandas.core.frame.DataFrame):
            self.print_text(text="\nColumn:", color_name="orange")
            self.print_text(text=column_name)
            print()
            number_row = 2
            for row in self.data_frame[column_name]:
                if isinstance(row, str):
                    row_to_line = []
                    row_to_line.append(number_row)
                    row_to_line.append(row)
                    all_rows_to_column.append(row_to_line)
                number_row += 1
            self.data_column = all_rows_to_column
            # return self.data_column
    
    # –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä–æ–∫—É –Ω–∞ –ø–µ—Ä–≤—É—é –∑–∞–≥–ª–∞–≤–Ω—É—é –±—É–∫–≤—É
    def is_title_line(self, line_text: str) -> None:
        try:
            first_leter = line_text[0]
            if first_leter.istitle() == False and first_leter[0].isdigit() == False:
                self.print_text(text="\n‚úÖ Litle letter to start string -> ", color_name="orange", pause=True)

        except IndexError:
            self.print_text(text="\n‚úÖ –û–±–Ω–∞—Ä—É–∂–µ–Ω —Å–∏–º–≤–æ–ª –≤ [–Ω–∞—á–∞–ª–µ –∏–ª–∏ –∫–æ–Ω—Ü–µ] —Å—Ç—Ä–æ–∫–∏ -> ", color_name="orange", pause=True)

    # –∏—â–∏–º —Ñ—Ä–∞–≥–º–µ–Ω—Ç —Ç–µ–∫—Å—Ç–∞ –≤ —è—á–µ–π–∫–µ
    def serch_to_line(self, line_text: str, pause: bool = False) -> None:
        search_word_lower = [word.lower() for word in self.search_text]
        for search in search_word_lower:
            if (line_text.lower()).find(search) != -1:
                print()
                self.print_text(text=f"‚úÖ –ù–∞–π–¥–µ–Ω–æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ: -> {search}", color_name="orange", pause=pause)
                return True

    # —É–¥–∞–ª–∏—Ç—å —Ñ—Ä–∞–≥–º–µ–Ω—Ç —Ç–µ–∫—Å—Ç–∞ –≤ —è—á–µ–π–∫–µ
    def delete_data_to_column(self, letters_colunm, number_row):
        cell_col_row = f'{letters_colunm}{number_row}'
        old_data = str(self.work_sheet[cell_col_row].value)
        new_data = old_data.replace(self.search_text[0], '').replace(';;', ';').lstrip()
        
        try:
            if new_data[0] == ';':
                new_data = new_data.replace(';', '')
        except IndexError:
            pass
        
        try:
            if new_data[-1] == ';':
                new_data = new_data.replace(';', '')
        except IndexError:
            pass

        self.work_sheet[cell_col_row] = new_data.lstrip()
    
    # –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ñ—Ä–∞–≥–º–µ–Ω—Ç–∞ —Ç–µ–∫—Å—Ç–∞ –≤ —è—á–µ–π–∫—É
    def add_data_to_colums(self, letters_colunm, number_row):
        cell_col_row = f'{letters_colunm}{number_row}'
        current_text_cell = str(self.work_sheet[cell_col_row].value)
        if current_text_cell != "None":
            self.work_sheet[cell_col_row] = current_text_cell + ";" + str(self.search_text[0])
        else:
            self.work_sheet[cell_col_row] = str(self.search_text[0])

    # –ø—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ –¥–∞–Ω–Ω—ã–µ –≤ —Å—Ç–æ–ª–±—Ü–µ
    def check_data_to_column(self):
        if len(self.data_column) < 1:
            print("‚õîÔ∏è Not data to this column\n")

    # —Ä–∞–±–æ—Ç–∞ —Å –æ–¥–Ω–∏–º –∞—Ç—Ä–∏–±–æ—Ç–æ–≤ –≤ —Ç–µ–∫—Å—Ç–µ —è—á–µ–π–∫–µ
    def parse_atributeto_row(self, row_text):
        atribute_to_row = row_text.split(';')
        for atribute in atribute_to_row:
            print(atribute)
            if self.is_title:
                self.is_title_line(atribute)
            if self.search_text:
                if self.add_text_cell and self.dell_text_cell:
                    self.serch_to_line(atribute)
                else:
                    self.serch_to_line(atribute, pause=True)

    # —Ä–∞–±–æ—Ç–∞ —Å–æ –≤—Å–µ–º —Ç–µ–∫—Å—Ç–æ–º –≤ —è—á–µ–π–∫–µ
    def parse_text_row(self, row_number, row_text):
        print(row_text)
        if self.is_title:
            self.is_title_line(row_text)
        if self.search_text:
            if self.add_text_cell and self.dell_text_cell:
                if self.serch_to_line(row_text):
                    self.add_data_to_colums(self.add_text_cell, row_number)
                    self.delete_data_to_column(self.dell_text_cell, row_number)
            else:
                self.serch_to_line(row_text, pause=True)

    # –ø–∞—Ä—Å–∏–º –¥–∞–Ω–Ω—ã–µ —Å–æ –≤—Å–µ—Ö —Å—Ç—Ä–æ–∫ —è—á–µ–π–∫–∏
    def parse_data_column(self, how_to_parse: str):
        self.check_data_to_column()
        for row in self.data_column:
            row_number = row[0]
            row_text = row[1]
            print(row_number)
            self.print_text(text="-"*15)

            if how_to_parse == 'line':
                self.parse_atributeto_row(row_text)
            if how_to_parse == 'text':
                self.parse_text_row(row_number, row_text)
            
            print()
    
    # save new file
    def save_new_file(self, new_name_file):
        if self.add_text_cell and self.dell_text_cell:
            try:
                output_file = new_name_file + ".xlsx"
                self.work_book.save(output_file)
                print('üíæ Document [Save]\n')
            except:
                print('‚õîÔ∏è Error [Save]\n')
        else:
            print("‚úÖ No data to save\n")



# —É–∫–∞–∑—ã–≤–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ –∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –ª–∏—Å—Ç–∞
document = Document(read_document='new_name_file.xlsx', sheet_name='Worksheet')
print('‚úÖ', document.read_document)

# —É–∫–∞–∑—ã–≤–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–ª–æ–Ω–∫–∏ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
document.return_list_data_row(column_name='–û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏-25704')

# –î–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞ –∑–∞–≥–ª–∞–≤–Ω—É—é –±—É–∫–≤—É –≤ —Å—Ç—Ä–æ–∫–µ  ## (–Ω–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)
# document.is_title = True

# —É–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ–∫—Å—Ç –∏–ª–∏ —Å–ª–æ–≤–∞ –ø–æ –æ—Ç–¥–µ–ª—å–Ω–æ—Å—Ç–∏ –¥–ª—è –ø–æ–∏—Å–∫–∞  ## (–Ω–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)
document.search_text = ['–°—Ç–µ—Ä–µ–æ-–¥–∏–Ω–∞–º–∏–∫–∏ (2 —à—Ç)']

# —É–¥–∞–ª—è–µ–º —Ç–µ–∫—Å—Ç –ø–æ–∏—Å–∫–∞ —Å —è—á–µ–π–∫–∏  ## (–Ω–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)
# document.dell_text_cell = 'AV'

# –¥–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç –ø–æ–∏—Å–∫–∞ –≤ —è—á–µ–π–∫—É  ## (–Ω–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)
# document.add_text_cell = 'AU'

# –ø–∞—Ä—Å–∏–º –¥–∞–Ω–Ω—ã–µ —Å–æ –≤—Å–µ—Ö —Å—Ç—Ä–æ–∫ —è—á–µ–π–∫–∏
document.parse_data_column(how_to_parse='text')

# —É–∫–∞–∑—ã–≤–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Ñ–∞–π–ª–∞ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
document.save_new_file('new_name_file_2')
